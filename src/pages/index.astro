---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import toolsData from "../data/tools.json";
import "../styles/global.css";

// Extraer todas las categorías únicas
const allCategories = new Set();
toolsData.forEach((tool) => {
  tool.categories.forEach((category) => {
    allCategories.add(category);
  });
});

const categories = Array.from(allCategories).sort();

// Definir arrays de colores con clases más específicas
const categoryColors = [
  "bg-red-500 text-white",
  "bg-orange-500 text-white",
  "bg-amber-500 text-black",
  "bg-yellow-500 text-black",
  "bg-lime-500 text-black",
  "bg-green-500 text-white",
  "bg-teal-500 text-white",
  "bg-cyan-500 text-black",
  "bg-sky-500 text-white",
  "bg-indigo-500 text-white",
];

const toolColors = [
  "bg-red-100 border-l-red-500 text-black",
  "bg-orange-100 border-l-orange-500 text-black",
  "bg-amber-100 border-l-amber-500 text-black",
  "bg-yellow-100 border-l-yellow-500 text-black",
  "bg-lime-100 border-l-lime-500 text-black",
  "bg-green-100 border-l-green-500 text-black",
  "bg-teal-100 border-l-teal-500 text-black",
  "bg-cyan-100 border-l-cyan-500 text-black",
  "bg-sky-100 border-l-sky-500 text-black",
  "bg-indigo-100 border-l-indigo-500 text-black",
];

// Asegurar que cada categoría tenga un color asignado
const categoryColorMap = {};
categories.forEach((category, index) => {
  const colorIndex = index % categoryColors.length;
  categoryColorMap[category] = categoryColors[colorIndex];
});
---

<Layout>
  <Header />
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-center mb-10">
      Development/Team tools
    </h1>

    <!-- Filtros de categorías -->
    <div class="mb-8">
      <h2 class="text-xl font-semibold mb-4">Category filter:</h2>
      <div class="flex flex-wrap gap-2" id="category-filters">
        <button
          class="category-filter bg-blue-500 text-white px-3 py-1 rounded-md filter-active"
          data-category="all"
        >
          All
        </button>
        {
          categories.map((category, idx) => {
            const colorClass = categoryColorMap[category];
            return (
              <button
                class={`category-filter px-3 py-1 rounded-md hover:opacity-90 ${colorClass}`}
                data-category={category}
              >
                {category}
              </button>
            );
          })
        }
      </div>
    </div>

    <!-- Grid de herramientas -->
    <div
      class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
      id="tools-grid"
    >
      {
        toolsData.map((tool, index) => {
          const colorIndex = index % toolColors.length;
          const toolColor = toolColors[colorIndex];

          return (
            <div
              class={`tool-card p-4 rounded-lg shadow-md border-l-4 ${toolColor}`}
              data-categories={JSON.stringify(tool.categories)}
            >
              <h3 class="text-lg font-medium">{tool.name}</h3>
              <div class="mt-2 flex flex-wrap gap-1">
                {tool.categories.map((category) => {
                  const catColorClass =
                    categoryColorMap[category] || "bg-gray-300 text-black";
                  return (
                    <span class={`text-xs px-2 py-1 rounded ${catColorClass}`}>
                      {category}
                    </span>
                  );
                })}
              </div>
            </div>
          );
        })
      }
    </div>
  </main>

  <script>
    // Lógica de filtrado (sin cambios)
    const categoryFilters = document.querySelectorAll(".category-filter");
    const toolCards = document.querySelectorAll(".tool-card");

    categoryFilters.forEach((filter) => {
      filter.addEventListener("click", () => {
        // Actualizar estado activo de los botones
        categoryFilters.forEach((btn) => btn.classList.remove("filter-active"));
        filter.classList.add("filter-active");

        const selectedCategory = filter.getAttribute("data-category");

        toolCards.forEach((card) => {
          const categories = JSON.parse(card.getAttribute("data-categories"));

          if (
            selectedCategory === "all" ||
            categories.includes(selectedCategory)
          ) {
            card.classList.remove("hidden");
          } else {
            card.classList.add("hidden");
          }
        });
      });
    });
  </script>
</Layout>
